# User Flow API Tests (.http file for REST Client)
# Change the baseUrl if your API Gateway runs on a different host/port
@baseUrl = https://sniperbuisnesscenter.com/api
@local = http://localhost:3000/api

# --- User A (Referrer) --- 
@userA_Username = referrer_1
@userA_Email = test1@example.com
@userA_Password = StrongPassword123!
@userA_Region = Center
@userA_PhoneNumber = 0700000000
@userA_AuthToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NWQyYjAzNDRhN2UyYjllZmJmNjIwNWQiLCJpZCI6IjY1ZDJiMDM0NGE3ZTJiOWVmYmY2MjA1ZCIsImVtYWlsIjoidGFtYm9uZ3N0ZXJsaW5nQGdtYWlsLmNvbSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0ODY4MzU0OSwiZXhwIjoxNzQ4NzY5OTQ5fQ.yNTw1m_6XNecnMukSxA5HmlGz1yO8I6KidXZ224FPDI
@userA_ReferralCode = thQuxq5p
@userA_Id = 67fb80065476e81725262bb1
@userA_Otp = GAoug5

# --- User B (Referred) ---
@userB_Username = referred_2
@userB_Email = test2@example.com
@userB_Password = StrongPassword123!
@userB_Region = Center
@userB_PhoneNumber = 080000000
@userB_AuthToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2N2ZiODIyMGI0ZmU2NzdkZmFlZjMxNGIiLCJlbWFpbCI6InRlc3QyQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJpYXQiOjE3NDQ4MjgxODEsImV4cCI6MTc0NDkxNDU4MX0.iTcxkpTFkR4q4WtcOnRYSn5PeZhWTnXXbkTzSSQgIWU
@userB_Id = 67fb8220b4fe677dfaef314b
@userB_Otp = W8nQ5U
# --- Subscription Details ---
@subscriptionType = PLATFORM_ACCESS
@subscriptionPlan = monthly

# --- Product/Rating IDs ---
@productId = 67fbb35bd88f7f3871f59a1f
@ratingId = 

###
# ==========================
# User A (Referrer) Setup
# ==========================


###
# A1-1. Register User A (Referrer)
POST {{baseUrl}}/users/register
Content-Type: application/json

{
  "name": "{{userA_Username}}",
  "email": "{{userA_Email}}",
  "password": "{{userA_Password}}",
  "region": "{{userA_Region}}",
  "phoneNumber": "{{userA_PhoneNumber}}",
  "sex": "male",
  "age": 25
}

###
# A1-2. Verify OTP
POST {{baseUrl}}/users/verify-otp
Content-Type: application/json

{
  "userId": "{{userA_Id}}",
  "otpCode": "{{userA_Otp}}"
}

###
# A2. Login User A (Referrer)
# @name loginUserA
POST {{baseUrl}}/users/login
Content-Type: application/json

{
  "email": "{{userA_Email}}",
  "password": "{{userA_Password}}"
}


###
# A3. Get User A Profile & Capture Referral Code
# @name getUserAProfile
GET {{baseUrl}}/users/me
Authorization: Bearer {{userA_AuthToken}}

# IMPORTANT: Adjust 'response.body.data.user.referralCode' and 'response.body.data.user._id' paths if different!
# > {% client.global.set("userA_ReferralCode", response.body.data.user.referralCode); %}

###
# ==========================
# User B (Referred) Setup
# ==========================

###
# B1. (Optional) Check who User A's referral code belongs to (Public)
GET {{baseUrl}}/users/get-affiliation?referralCode={{userA_ReferralCode}}

###
# B2-1. Register User B (Referred) using User A's code
POST {{baseUrl}}/users/register
Content-Type: application/json

{
  "name": "{{userB_Username}}",
  "email": "{{userB_Email}}",
  "password": "{{userB_Password}}",
  "region": "{{userB_Region}}",
  "phoneNumber": "{{userB_PhoneNumber}}",
  "referrerCode": "{{userA_ReferralCode}}"
}

###
# B2-2. Verify OTP
POST {{baseUrl}}/users/verify-otp
Content-Type: application/json

{
  "userId": "{{userB_Id}}",
  "otpCode": "{{userB_Otp}}"
}

###
# B3. Login User B (Referred)
# @name loginUserB
POST {{baseUrl}}/users/login
Content-Type: application/json

{
  "email": "{{userB_Email}}",
  "password": "{{userB_Password}}"
}

# > {% client.global.set("userB_AuthToken", response.body.data.token); %}

###
# B4. Get User B Profile (Verify registration & Capture ID)
# @name getUserBProfile
GET {{baseUrl}}/users/me
Authorization: Bearer {{userB_AuthToken}}

# IMPORTANT: Adjust 'response.body.data.user._id' path if different!
# > {% client.global.set("userB_Id", response.body.data.user._id); %}

###
# ====================================
# User B Subscription Flow (Simulated)
# ====================================

###
# S1. Initiate Payment Intent for Platform Access (Requires User B Auth Token in theory, but endpoint needs ID in body)
# Note: The payment service endpoint seems to expect userId in the body. 
# This flow assumes the gateway or auth middleware makes the ID available implicitly, 
# or the payment service retrieves it based on the token indirectly.
# If it strictly requires userId in body, adjust the request below.
POST {{baseUrl}}/payments/intents
Authorization: Bearer {{userA_AuthToken}} # Auth might be needed depending on gateway setup
Content-Type: application/json

{
  "userId": "{{userA_Id}}",
  "subscriptionType": "{{subscriptionType}}",
  "subscriptionPlan": "{{subscriptionPlan}}"
}

###
# S2. << SIMULATED PAYMENT >>
# Normally, the user would be redirected to a payment page using the sessionId from S1 response.
# After payment, a webhook would notify the payment-service, which then calls user-service 
# internal endpoint to activate the subscription.
# We skip these steps and proceed assuming payment was successful.

###
# S3. Check Subscription Status for User B (Requires User B Auth)
# Should return active: true (or similar) after simulated payment
GET {{baseUrl}}/subscriptions/check/{{subscriptionType}}
Authorization: Bearer {{userA_AuthToken}}

###
# ==========================
# Referrer Checks (User A)
# ==========================

###
# C1. Get User A's Referral Statistics (Requires User A Auth)
GET {{baseUrl}}/users/get-referals
Authorization: Bearer {{userA_AuthToken}}

###
# C2. Get User A's Referred Users List (Requires User A Auth)
# Should list User B
GET {{baseUrl}}/users/get-refered-users?page=1&limit=10
Authorization: Bearer {{userA_AuthToken}}

###
# ==========================
# Product Flow (Example using User B - Requires Subscription)
# ==========================

###
# P1. Search Products (Public)
GET {{baseUrl}}/products/search?searchTerm=example&category=electronics

###
# P2. Create Product (Requires User B Authentication & Active Subscription)
# @name createProduct
POST {{baseUrl}}/products
Authorization: Bearer {{userB_AuthToken}} 
Content-Type: application/json

{
  "name": "User B Test Product {{$randomInt}}",
  "category": "Cars",
  "subcategory": "Cars",
  "description": "A product created by the referred user.",
  "imagesUrl": ["https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"],
  "price": 19.99
}

# Extract the product ID for later use (adjust path if needed)
# > {% client.global.set("productId", response.body.data._id); %}

###
# P3. Get Specific Product (Public) - Uses ID from Create Product
GET {{baseUrl}}/products/{{productId}}

###
# P4. Get User B's Products (Requires User B Authentication)
GET {{baseUrl}}/products/user
Authorization: Bearer {{userB_AuthToken}}

###
# P5. Update User B's Product (Requires User B Authentication) - Uses ID from Create Product
PUT {{baseUrl}}/products/{{productId}}
Authorization: Bearer {{userB_AuthToken}}
Content-Type: application/json

{
  "description": "Updated product description by User B.",
  "price": 21.99
}

###
# P6. Rate Product (Requires User B Authentication) - Uses ID from Create Product
# @name rateProduct
POST {{baseUrl}}/products/{{productId}}/ratings
Authorization: Bearer {{userA_AuthToken}}
Content-Type: application/json

{
  "rating": 5,
  "review": "Excellent product by User A!"
}


###
# P7. Get Product Ratings (Public) - Uses ID from Create Product
GET {{baseUrl}}/products/{{productId}}/ratings

###
# P8. Get User B's Ratings (Requires User B Authentication)
GET {{baseUrl}}/products/user/ratings
Authorization: Bearer {{userB_AuthToken}}

###
# P9. Mark Rating as Helpful (Requires User B Authentication) - Uses ID from Rate Product
POST {{baseUrl}}/products/ratings/{{ratingId}}/helpful
Authorization: Bearer {{userB_AuthToken}}

###
# P10. Delete Rating (Requires User B Authentication) - Uses ID from Rate Product
DELETE {{baseUrl}}/products/ratings/{{ratingId}}
Authorization: Bearer {{userB_AuthToken}}

###
# P11. Delete Product (Requires User B Authentication) - Uses ID from Create Product
DELETE {{baseUrl}}/products/{{productId}}
Authorization: Bearer {{userB_AuthToken}}

###
# =====================
# Optional Error Tests
# =====================

###
# (Optional) Test Invalid Token for User Profile
GET {{baseUrl}}/users/profile
Authorization: Bearer invalidtoken123

###
# (Optional) Test Login with incorrect password (User A)
POST {{baseUrl}}/users/login
Content-Type: application/json

{
  "email": "{{userA_Email}}",
  "password": "WrongPassword"
}

###
# (Optional) Test Get Non-Existent Product
GET {{baseUrl}}/products/60c72b2f9b1e8a5d4c8a0a99 # Use a likely non-existent ID

###
# (Optional) Test Create Product without Auth
POST {{baseUrl}}/products
Content-Type: application/json

{
  "name": "Unauthorized Product",
  "category": "Test",
  "subcategory": "Test",
  "description": "Test desc.",
  "imagesUrl": [],
  "price": 10
}

###
# (Optional) Test Register with invalid referral code
POST {{baseUrl}}/users/register
Content-Type: application/json

{
  
  "name": "invalid_ref_{{$randomInt}}",
  "email": "invalid_ref_{{$randomInt}}@example.com",
  "password": "Password123",
  "region": "Center",
  "phoneNumber": "0000000000",
  "sex": "male",
  "age": 25,
  "referrerCode": "INVALIDCODE123"
}

###
# (Optional) Test Check Subscription without Auth
GET {{baseUrl}}/subscriptions/check/{{subscriptionType}}

###
# (Optional) Try to Create Product without Subscription (Assuming S1-S3 were skipped)
# This test only makes sense if you run requests individually and skip S1-S3
POST {{baseUrl}}/products
Authorization: Bearer {{userB_AuthToken}} 
Content-Type: application/json

{
  "name": "Product Without Subscription {{$randomInt}}",
  "category": "Test",
  "subcategory": "Test",
  "description": "This should fail if subscription is required.",
  "imagesUrl": [],
  "price": 5
}

###
# ====================================
# Contact Plan Subscription (User B)
# ====================================

@contactSubscriptionType = CONTACT_PLAN
@contactSubscriptionPlan = contacts_100

###
# CS1. Initiate Payment Intent for Contact Plan (User B)
# Requires User B ID in body based on previous payment intent requests
POST {{baseUrl}}/payments/intents
Authorization: Bearer {{userB_AuthToken}} # Or appropriate service token if gateway requires
Content-Type: application/json

{
  "userId": "{{userB_Id}}",
  "subscriptionType": "{{contactSubscriptionType}}",
  "subscriptionPlan": "{{contactSubscriptionPlan}}"
}

###
# CS2. << PAYMENT SIMULATED >>
# Payment Service is configured to auto-succeed for testing.

###
# CS3. Check Contact Plan Subscription Status for User B
# Should return active: true (or similar) after simulated payment
GET {{baseUrl}}/subscriptions/check/{{contactSubscriptionType}}
Authorization: Bearer {{userB_AuthToken}}

###
# ====================================
# Contact Download/Export Tests
# ====================================

# Note: These tests assume contacts have been added to User B previously.
# Adding contacts route is not defined in the provided files.

###
# CD1. User B (with Contact Plan) Downloads All Contacts
# Expects success (200 OK) and contact data (e.g., VCF or JSON)
GET {{baseUrl}}/contacts/export
Authorization: Bearer {{userA_AuthToken}}

###
# CD2. User B (with Contact Plan) Downloads Filtered Contacts
# Example filters: category and region
# Expects success (200 OK) and filtered contact data
GET {{baseUrl}}/contacts/export?category=Business&region=North
Authorization: Bearer {{userA_AuthToken}}

###
# CD3. User A (Platform Access Only) Tries to Download Contacts
# Expected result depends on business logic:
# - If PLATFORM_ACCESS allows downloads -> Success (200 OK)
# - If CONTACT_PLAN is strictly required -> Forbidden (403) or Bad Request (400)
GET {{baseUrl}}/contacts/export
Authorization: Bearer {{userA_AuthToken}}


###
# ====================================
# webhook Tests
# ====================================
@ok = [7ox9ApctFtyp]
@screte = {{$dotenv TEST}} 
###
# WH1. User A (Referrer) creates a webhook
POST {{baseUrl}}/payments/webhooks/feexpay
Authorization: Bearer {{screte}}
Content-Type: application/json

{
  "reference": "9r2WUucyrWii",
  "status": "SUCCESSFUL"
}


###
# WH2. User A (Referrer) gets the webhook
GET {{baseUrl}}/health
Content-Type: application/json





### Unfiltered (fast)
GET {{local}}/contacts/export 
Authorization: Bearer {{userA_AuthToken}}

### Country filter
GET {{local}}/contacts/export?country=CM
Authorization: Bearer {{userA_AuthToken}}

### Advanced targeting
GET {{local}}/contacts/export?country=CM&sex=male&minAge=25&maxAge=35&profession=Engineer
Authorization: Bearer {{userA_AuthToken}}


### Initiate a payout to Cameroon MTN
POST {{local}}/payouts/initiate
Authorization: Bearer {{userA_AuthToken}}
Content-Type: application/json

{
  "targetUserId": "65d2b0344a7e2b9efbf6205d",
  "amount": 500,
  "phoneNumber": "675080477",
  "countryCode": "CM",
  "recipientName": "Tambong Stercy",
  "paymentMethod": "MTNCM"
}

### Get the balance of the user
GET {{local}}/payouts/balance
Authorization: Bearer {{userA_AuthToken}}

### Get the status of a payout
GET {{local}}/payouts/status/SBC_65d2b0344a7e2b9efbf6205d_1748737200428
Authorization: Bearer {{userA_AuthToken}}

### Get image
GET {{baseUrl}}/settings/files/1mGB6QAxea_mDHHeKGCSWlBscXIeKZC2p


####====================================
# Withdrawal Tests
####====================================
@host = https://sniperbuisnesscenter.com/api

### Getting Authentication Tokens
# Before you can test any protected endpoints, you need to log in to get a JWT token.
# Replace `user@example.com` and `admin@example.com` with actual user/admin credentials.

### Get User Auth Token (Login)
POST {{host}}/users/login
Content-Type: application/json

{
    "email": "user@example.com",
    "password": "your_user_password"
}

### Get Admin Auth Token (Login)
POST {{host}}/users/login
Content-Type: application/json

{
    "email": "admin@example.com",
    "password": "your_admin_password"
}

# --- IMPORTANT: Copy the Bearer token from the successful login response above ---
# Store them in your environment variables or manually replace below
@AUTH_TOKEN = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NWQyYjAzNDRhN2UyYjllZmJmNjIwNWQiLCJpZCI6IjY1ZDJiMDM0NGE3ZTJiOWVmYmY2MjA1ZCIsImVtYWlsIjoidGFtYm9uZ3N0ZXJsaW5nQGdtYWlsLmNvbSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MTA1MzI4OCwiZXhwIjoxNzUxMTM5Njg4fQ.hSV9OU9iForB03--qBHSUtI4fqkBf9tAMKYgi49KcO8
@ADMIN_AUTH_TOKEN = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NWQyYjAzNDRhN2UyYjllZmJmNjIwNWQiLCJpZCI6IjY1ZDJiMDM0NGE3ZTJiOWVmYmY2MjA1ZCIsImVtYWlsIjoidGFtYm9uZ3N0ZXJsaW5nQGdtYWlsLmNvbSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MTA1MzI4OCwiZXhwIjoxNzUxMTM5Njg4fQ.hSV9OU9iForB03--qBHSUtI4fqkBf9tAMKYgi49KcO8


### USER WITHDRAWAL ENDPOINTS

### 1. User Withdrawal Initiation (Requires AUTH_TOKEN)
# This initiates a withdrawal and sends an OTP to the user's registered contact.
# The `transactionId` returned here is crucial for the verification step.
# IMPORTANT: This assumes the authenticated user has pre-registered their
# Mobile Money details (momoNumber, momoOperator, country) in the user-service.
# The payment service will fetch these details.
POST {{host}}/transactions/withdrawal/initiate
Content-Type: application/json
Authorization: Bearer {{AUTH_TOKEN}}

{
    "amount": 500
}



### 2. User Withdrawal Verification (Requires AUTH_TOKEN)
# Use the `transactionId` from the "User Withdrawal Initiation" response.
# Use the OTP code received (simulated as "123456" in development).
POST {{host}}/transactions/withdrawal/verify
Content-Type: application/json
Authorization: Bearer {{AUTH_TOKEN}}

{
    "transactionId": "5-X4mGMeZJQuzLj4",
    "verificationCode": "273141"
}

### 3. User Withdrawal Cancellation (Requires AUTH_TOKEN)
# This cancels a withdrawal request if it's still in the `pending_otp_verification` state.
# Replace `TRANSACTION_ID_TO_CANCEL` with the actual transaction ID.
DELETE {{host}}/transactions/withdrawal/cKNPu-_fvRogCm1R/cancel
Content-Type: application/json
Authorization: Bearer {{AUTH_TOKEN}}

### ADMIN WITHDRAWAL / PAYOUT ENDPOINTS

### 4. Admin-initiated User Withdrawal (Requires ADMIN_AUTH_TOKEN)
# This endpoint allows an admin to initiate a withdrawal for a specific user.
# It debits the user's balance and triggers the external payout without OTP.
# Replace `USER_ID_TO_DEBIT` with the actual MongoDB `_id` of the target user.
POST {{host}}/withdrawals/admin/user
Content-Type: application/json
Authorization: Bearer {{ADMIN_AUTH_TOKEN}}

{
    "userId": "65d2b0344a7e2b9efbf6205d",
    "amount": 600,
    "currency": "XAF",
    "method": "MTNCM",
    "accountInfo": {
        "fullMomoNumber": "237671234567",
        "momoOperator": "MTN",
        "countryCode": "CM",
        "recipientName": "John Doe",
        "recipientEmail": "john.doe@example.com"
    }
}

### 5. Admin-initiated Direct Payout (Requires ADMIN_AUTH_TOKEN)
# This endpoint initiates an external payout directly from the system's CinetPay balance,
# NOT from a specific user's balance. It's for system-level payments or refunds.
POST {{host}}/withdrawals/admin/direct
Content-Type: application/json
Authorization: Bearer {{ADMIN_AUTH_TOKEN}}

{
    "amount": 500,
    "currency": "XAF",
    "recipientDetails": {
        "phoneNumber": "237671234567",
        "countryCode": "CM",
        "recipientName": "Vendor Name",
        "recipientEmail": "vendor@example.com",
        "paymentMethod": "ORANGE_MONEY_CMR"
    },
    "description": "Direct payment to a vendor for services rendered."
}


###
@screte2 = {{$dotenv FP_SECRET}} 


###
GET https://api.feexpay.me/api/transactions/public/single/status/0bTX2aFIJBLE
Authorization: Bearer {{screte2}}

####====================================
# Admin Referral Fix Endpoint
####====================================

### 6. Admin Fix Referral and Commissions
# This endpoint allows an admin to fix referral hierarchy for specific users
# and retroactively distribute commissions for past payments.
# Replace user identifiers with actual emails or phone numbers.
# Adjust bugStartDate and bugEndDate to the actual period of the bug.
POST {{host}}/users/admin/fix-referrals
Content-Type: application/json
Authorization: Bearer {{ADMIN_AUTH_TOKEN}}

{
  "usersToFix": [
    {
      "userIdentifier": "koulekpo@gmail.com",
      "correctReferrerIdentifier": "kaiserxlenoir@gmail.com"
    }
  ],
  "bugStartDate": "2024-06-09T00:00:00Z",  
  "bugEndDate": "2026-06-13T23:59:59Z"    
}

### Simulate CinetPay Webhook Notification (Success)
# This simulates a POST request from CinetPay to your webhook endpoint.
# Replace values with actual transaction data as needed for testing.
POST {{host}}/payouts/webhooks/cinetpay
Content-Type: application/json

{
    "transaction_id": "EA250612.091242.N514725",
    "client_transaction_id": "RTVNHZSHPkr0OLaX",
    "treatment_status": "VAL",
    "amount": 4000,
    "receiver": "675080477",
    "comment": "Successful payout notification"
}


# ####
# POST {{host}}/payouts/webhooks/cinetpay
# Content-Type: application/json
# Authorization: Bearer {{ADMIN_AUTH_TOKEN}}

####====================================
# CinetPay API Direct Tests
####====================================


# ###
# @CINETPAY_API_KEY = {{$dotenv CINETPAY_API_KEY}}
# @CINETPAY_API_PASSWORD = {{$dotenv CINETPAY_API_PASSWORD}}


# ### Get CinetPay Transfer Information
# # This endpoint allows you to check the status of a transfer directly with CinetPay.
# # You need a valid CinetPay API token and one of the transaction IDs (CinetPay's or your client_transaction_id).
# GET https://client.cinetpay.com/v1/transfer/check/money?token={{loginCinetPay.response.body.$.data.token}}&lang=fr&client_transaction_id=Xd4j5df50rz9q7d_

# ### Or use CinetPay's transaction_id:
# # GET https://client.cinetpay.com/v1/transfer/check/money?token=YOUR_CINETPAY_TOKEN&lang=fr&transaction_id=YOUR_CINETPAY_TRANSACTION_ID

# ### Or use CinetPay's lot number:
# # GET https://client.cinetpay.com/v1/transfer/check/money?token=YOUR_CINETPAY_TOKEN&lang=fr&lot=YOUR_CINETPAY_LOT_NUMBER

# ### Get CinetPay API Token
# # This endpoint allows you to generate an authentication token for CinetPay's API.
# # Replace YOUR_CINETPAY_API_KEY and YOUR_CINETPAY_PASSWORD with your actual credentials.
# # @name loginCinetPay
# POST https://client.cinetpay.com/v1/auth/login
# Content-Type: application/x-www-form-urlencoded

# apikey=YOUR_DUMMY_API_KEY&
# password=YOUR_DUMMY_PASSWORD

# ### Extract the token from the response if you need it for subsequent requests
# # > {% client.global.set("cinetpay_token", response.body.data.token); %}

# ### Get CinetPay Account Transfer Balance
# # This endpoint allows you to check your available balance for transfers with CinetPay.
# # You need a valid CinetPay API token.
# GET https://client.cinetpay.com/v1/transfer/check/balance?token=YOUR_CINETPAY_TOKEN&lang=fr

# ### Send Money to a CinetPay Wallet
# # This endpoint allows you to send money to a specific wallet (e.g., MTN, Orange).
# # You need a valid CinetPay API token.
# POST https://client.cinetpay.com/v1/transfer/money/send/wallet?lang=fr
# Content-Type: application/x-www-form-urlencoded

# token=YOUR_CINETPAY_TOKEN&
# prefix=YOUR_COUNTRY_CODE_PREFIX&
# phone=YOUR_PHONE_NUMBER&
# amount=YOUR_AMOUNT&
# client_transaction_id=YOUR_CLIENT_TRANSACTION_ID&
# payment_method=YOUR_PAYMENT_METHOD_SLUG&
# notify_url=YOUR_NOTIFY_URL&
# description=YOUR_DESCRIPTION

# ### Add One or More Contacts on CinetPay
# # This endpoint allows you to add new contacts to your CinetPay account.
# # You need a valid CinetPay API token.
# POST https://client.cinetpay.com/v1/transfer/contact?lang=fr
# Content-Type: application/x-www-form-urlencoded

# token=YOUR_CINETPAY_TOKEN&
# data=[{
#     "prefix": "CONTACT_PREFIX",
#     "phone": "CONTACT_PHONE",
#     "name": "CONTACT_NAME",
#     "surname": "CONTACT_SURNAME",
#     "email": "CONTACT_EMAIL"
# }]

# ### Send Money from One or More CinetPay Contacts
# # This endpoint allows you to send money to contacts already registered on CinetPay.
# # You need a valid CinetPay API token.
# POST https://client.cinetpay.com/v1/transfer/money/send/contact?lang=fr
# Content-Type: application/x-www-form-urlencoded

# token=YOUR_CINETPAY_TOKEN&
# data=[{
#     "prefix": "CONTACT_PREFIX_TO_SEND",
#     "phone": "CONTACT_PHONE_TO_SEND",
#     "amount": YOUR_AMOUNT_TO_SEND,
#     "client_transaction_id": "YOUR_CLIENT_TRANSACTION_ID_FOR_TRANSFER",
#     "payment_method": "YOUR_PAYMENT_METHOD_SLUG_FOR_TRANSFER",
#     "notify_url": "YOUR_NOTIFY_URL_FOR_TRANSFER",
#     "description": "DESCRIPTION_OF_TRANSFER"
# }]
