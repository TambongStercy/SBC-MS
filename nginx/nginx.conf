worker_processes 1;

events {
    worker_connections 1024;
}

http {
    sendfile on;
    # Define upstreams for all backend services with their new ports
    upstream user_service {
        server user-service:3001;
    }
    upstream notification_service {
        server notification-service:3002;
    }
    upstream payment_service {
        server payment-service:3003;
    }
    upstream product_service {
        server product-service:3004;
    }
    upstream advertising_service {
        server advertising-service:3005;
    }
    upstream tombola_service {
        server tombola-service:3006;
    }
    upstream settings_service {
        server settings-service:3007;
    }
    # No upstream needed for admin-frontend-ms as it's likely a static build served by its own Nginx
    # or if it's an API, it would need an upstream like the others.
    # Assuming it's a frontend, Nginx can proxy directly to its container if needed,
    # or it's accessed via a different host port (8008) as per docker-compose.

    server {
        listen 80; # Nginx listens on port 80
        server_name localhost; # Or your domain

        # Common proxy settings to reduce repetition
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300s; # Optional: Increase timeout
        proxy_connect_timeout 75s; # Optional: Increase timeout

        location /api/users {
            proxy_pass http://user_service;
        }

        location /api/notifications {
            proxy_pass http://notification_service;
        }

        location /api/payments {
            proxy_pass http://payment_service;
        }

        location /api/products {
            proxy_pass http://product_service;
        }

        location /api/advertising {
            proxy_pass http://advertising_service;
        }

        location /api/tombola {
            proxy_pass http://tombola_service;
        }

        location /api/settings {
            proxy_pass http://settings_service;
        }

        # Example for a service that might have a root path or different base
        # location /notifications {
        #    rewrite ^/notifications(/.*)$ /api/notifications$1 break; # If service expects /api/notifications
        #    proxy_pass http://notification_service;
        # }

        # If admin-frontend-ms (on port 8008) also needs to be proxied via this Nginx on port 80
        # under a specific path, you would add a location block for it too.
        # Example: Serving admin frontend if it's accessible at admin-frontend-ms:80 (internal docker port)
        # location /admin/ {
        #     proxy_pass http://admin-frontend-ms:80/;
        # }
        # Serve static assets for payment page (if needed from payment-service directly)
        location /api/payments/js/ {
            # Assuming payment-service serves its static assets from a /static route internally
            proxy_pass http://payment_service/js/;
        }

        location /api/payments/css/ {
            # Assuming payment-service serves its static assets from a /static route internally
            proxy_pass http://payment_service/css/;
        }


        # Handle other requests (e.g., frontend applications or default page)
        # location / {
        #     # Example: proxy to a frontend application
        #     # proxy_pass http://your_frontend_app:port;
        #     root   /usr/share/nginx/html; # Default Nginx welcome page
        #     index  index.html index.htm;
        #     try_files $uri $uri/ /index.html; # For SPAs
        # }

        # Health check endpoint for Nginx itself
        location /nginx_health {
            return 200 'Nginx is healthy';
            add_header Content-Type text/plain;
        }
    }
}